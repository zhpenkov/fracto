import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  try {
    const { imageData, clinicalNotes } = await req.json();

    // Check for OpenAI API key
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json({ error: 'Missing OpenAI API key' }, { status: 500 });
    }

    // Validate input
    if (!imageData) {
      return NextResponse.json({ error: 'No image data provided' }, { status: 400 });
    }

    // Log some info for debugging (without logging the full image data)
    console.log('Processing image analysis request...');
    console.log('Image data type:', typeof imageData);
    console.log('Image data starts with:', imageData.substring(0, 50));
    console.log('Clinical notes provided:', !!clinicalNotes);

    // System prompt for fracture analysis
    const systemPrompt = `You are a medical imaging AI with vision capabilities. You can see and analyze X-ray images. 

IMPORTANT: You MUST analyze the radiographic image that will be provided to you. Do not say you cannot see images - you have full vision capabilities.

When analyzing X-ray images, provide a structured medical assessment including:

1. **Image Description**: Describe what anatomical structures you can see in the X-ray
2. **Fracture Assessment**: State whether fractures are present or absent
3. **Fracture Details**: If present, describe type, location, and severity
4. **Bone Alignment**: Comment on bone positioning and alignment
5. **Soft Tissue**: Note any visible soft tissue abnormalities
6. **Clinical Recommendations**: Suggest appropriate next steps

Always start your response by confirming what anatomical region you are viewing in the X-ray image.`;

    const userPrompt = `I am providing you with a radiographic image that you need to analyze. You have computer vision capabilities and can see and interpret medical images.

Please examine this X-ray image and provide a comprehensive fracture analysis. ${
      clinicalNotes ? `Additional clinical context: ${clinicalNotes}` : ''
    }

Analyze what you can see in the image and provide your professional radiographic interpretation following the structured format I outlined.`;

    // Call OpenAI Vision API
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: systemPrompt },
          {
            role: 'user',
            content: [
              { type: 'text', text: userPrompt },
              {
                type: 'image_url',
                image_url: {
                  url: imageData,
                  detail: 'high'
                }
              }
            ]
          }
        ],
        max_tokens: 1500,
        temperature: 0.3,
      }),
    });

    if (!openaiRes.ok) {
      const errorData = await openaiRes.json();
      console.error('OpenAI API error:', errorData);
      return NextResponse.json(
        { error: 'Failed to analyze image', details: errorData }, 
        { status: openaiRes.status }
      );
    }

    const data = await openaiRes.json();
    const analysisResult = data.choices?.[0]?.message?.content;

    console.log('OpenAI response received');
    console.log('Analysis result preview:', analysisResult?.substring(0, 200) + '...');

    if (!analysisResult) {
      return NextResponse.json(
        { error: 'No analysis result received from AI' }, 
        { status: 500 }
      );
    }

    // Add medical disclaimer to the result
    const finalResult = `${analysisResult}

---

⚠️ **MEDICAL DISCLAIMER**: This analysis is generated by AI for educational and demonstration purposes only. It should NOT be used for actual medical diagnosis or treatment decisions. Always consult with qualified healthcare professionals for proper medical evaluation and care.`;

    return NextResponse.json({ 
      analysis: finalResult,
      timestamp: new Date().toISOString(),
      model: 'gpt-4o'
    });

  } catch (error) {
    console.error('Error in fracture analysis:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' }, 
      { status: 500 }
    );
  }
}
